head(cr)
summary(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
head(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
submit()
submit()
length(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
length(cr)
submit()
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
head(cr)
length(cr)
summary(cr)
cr <- corr("specdata", 150)
length(cr)
head(cr)
summary(cr)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
head(cr)
length(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
save.image("~/Documents/Machine Learning/coursera r programming/r.RData")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
setwd("~/Documents/Machine Learning/coursera r programming")
cr <- corr("specdata", 150)
summary(cr)
submit()
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
warnings()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
submit()
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
length(cr)
head(cr)
hear(cr, 10)
head(cr, 10)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
head(cr, 10)
submit()
summary(cr)
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
submit()
submit()
submit()
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
source('~/Documents/Machine Learning/coursera r programming/corr.R')
cr <- corr("specdata", 150)
summary(cr)
length(cr)
install.packages("sqldf")
install.packages("sqldf")
source('~/Documents/Machine Learning/exploratory data analysis/week2quiz2.R')
source('~/Documents/Machine Learning/exploratory data analysis/week2quiz2.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeightpanel = function(x, y, ...) {
panel.bwplot(x, y, ...)
panel.text(x, 0.55, labels = lab)
})
xyplot(weight ~ Time | Diet, BodyWeightpanel = function(x, y, ...) {
panel.bwplot(x, y, ...)
panel.axis(x, 0.55, labels = lab)
})
source('~/Documents/Machine Learning/exploratory data analysis/week2quiz2.R')
source('~/Documents/Machine Learning/exploratory data analysis/week2quiz2.R')
panel.lin.axis(x, 0.55, labels = lab)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(lattice)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(shiny)
library(rsconnect)
shinyapps::setAccountInfo(name='kenvanderheyden', token='CD06203C9B1FF1B7CB2D20AF75DFBF23', secret='CdQjwPxBrQqup2eZaCza+94rGcA0dsgGkQbI3V4b')
save.image("~/Documents/VerkeersCentrum/rws.RData")
deployApp()
deployApp(getwd(), "~")
deployApp(getwd(), "data")
source('~/Documents/DBM/algorithm_tests/stringdist_plot.R')
View(R)
View(R0)
shiny::runApp('~/Documents/VerkeersCentrum/twitteR')
install.packages("Hmisc")
activDataCompleted <- activDataCompleted %>% mutate(typeOfDay = ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday"))
ifelse(as.POSIXlt(activDataCompleted$date)$wday %in% c(0,6), 'weekend', 'weekday')
activDataCompleted <- ifelse(as.POSIXlt(activDataCompleted$date)$wday %in% c(0,6), 'weekend', 'weekday')
activDataCompleted <- activData
activData <- read.csv('activity.csv')
volume
quantile <- 0.95
quantile <- 0.95
μ <- 1100
σ <- 75
volume <- round(qnorm(quantile, mean = μ, sd = σ))
print(volume)
install.packages("UsingR")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
> plot(x,w)
plot (x, w)
cor(x,w)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
minu <- sum(x*w) / sum(w)
final <- sum(w*(x-minu)^2)
c(minu, final)
mu <- c(0.1471, 1.077, 0.0025, 0.300)
for (v in mu)
{print( c(v, sum(w*(x-v)^2)) )}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y) *sd(y)/sd(x)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
cor(x,y) *sd(y)/sd(x)
shiny::runApp('~/Documents/VerkeersCentrum/twitteR')
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
zx <- (x-mean(x)) / sd(x)
zx[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
b1
b0
cor(x, y)
cor(y, x)
plot(x, y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
for(u in c(0.573, 0.8, 0.36, 0.44))
{
SSE <- sum((x-u)^2)
print(c(u, SSE))
}
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
data(mtcars)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3000), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 2), interval = ("prediction"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 2), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
#fit_car <- lm(y ~ x)
#predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
---
install.packages("pdflatex")
devtools::install_github("rstudio/rmarkdown")
install.packages("latex2exp")
install.packages("xelatex")
mvlm2 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ as.factor(cyl)/disp + wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ as.factor(cyl)/disp * wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ disp/as.factor(cyl) * (wt + am), data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ cyl * wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ cyl * wt + am, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
mvlm2 <- lm(mpg ~ cyl * am +wt, data = mtcars)
summary(mvlm2)$r.squared
summary(mvlm2)$fstatistic
import(datasets)
library(datasets)
head(Titanic)
summary(Titanic)
Titanic
head(Titanic, n=20)
library(datasets)
summary(Titanic)
head(Titanic, n=20)
head(Titanic, n=200)
Titanic
View(R)
titanic <- Titanic
titanic <- Titanic
titanic
titanic <- Titanic
install.packages("caret")
caret
library(caret)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rattle")
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
install.packages('e1071', dependencies=TRUE)
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", header = FALSE)
colnames(data) <- c('age', 'workclass', 'fnlwgt', 'education', 'educationnum', 'maritalstatus', 'occupation', 'relationship', 'race', 'sex', 'capitalgain', 'capitalloss', 'hoursperweek', 'nativecountry', 'income')
View(data)
mydata <- read.csv("train.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("data")
library("caretEnsemble", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("alluvial", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("stringr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("party", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("randomForest", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ada", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("doMC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("doParallel", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("rattle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("rpart.plot", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("rpart", lib.loc="/usr/lib/R/library")
library("latticeExtra", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library("caret", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
View(test)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
featurePlot(x=training[,1:8], y=training$CompressiveStrength, plot=pairs)
qplot(CompressiveStrength, colour=FlyAsh, data=training, geom=density)
qplot(CompressiveStrength, colour=FlyAsh, data=training, geom="density")
qplot(CompressiveStrength, colour=index, data=training, geom="density")
source('~/Documents/Machine Learning/practical ml/q3.R')
View(segmentationOriginal)
source('~/Documents/Machine Learning/practical ml/q3.R')
source('~/Documents/Machine Learning/practical ml/q3.R')
source('~/Documents/Machine Learning/practical ml/q3.R')
trainInput <- read.csv("pml-training.csv", na.strings="NA", stringsAsFactors=FALSE)
setwd("~/Documents/Machine Learning/practical ml/assignment")
trainInput <- read.csv("pml-training.csv", na.strings="NA", stringsAsFactors=FALSE)
testInput <- read.csv("pml-testing.csv", na.strings="NA", stringsAsFactors=FALSE)
trainInput <- read.csv("pml-training.csv", na.strings="NA", stringsAsFactors=FALSE)
testInput <- read.csv("pml-testing.csv", na.strings="NA", stringsAsFactors=FALSE)
View(testInput)
View(trainInput)
str(trainInput)
testInput$classe <- NA
trainInput$classe
testInput$classe
dataset <- rbind(trainInput,testInput)
testInput <- read.csv("pml-testing.csv", na.strings="NA", stringsAsFactors=FALSE)
testInput$classe
testInput$classe[10,]
testInput$classe[,10]
testInput <- read.csv("pml-testing.csv", na.strings="NA", stringsAsFactors=FALSE)
testInput$classe
dataset <- rbind(trainInput,testInput)
head(select(trainInput, contains("arm")))
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
head(select(trainInput, contains("arm")))
head(select(trainInput, contains("arm") | contains("belt")))
head(select(trainInput, contains("belt" | "arm")))
